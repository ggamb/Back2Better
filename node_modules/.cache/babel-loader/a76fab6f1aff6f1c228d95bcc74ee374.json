{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\glenn\\\\Desktop\\\\Personal coding\\\\Back2Better-React\\\\Back2Better\\\\src\\\\components\\\\Home\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Home() {\n  _s();\n\n  let [metroLineData, setMetroLineData] = useState([{\n    lineCode,\n    maximumTrainDelay,\n    averageTrainFrequency,\n    expectedTrainFrequency,\n    averagePlatformWaitTime,\n    platformWaitTimeTrendStatus,\n    numTrains,\n    trainFrequencyStatus\n  }]);\n  const apiKey = process.env.REACT_APP_METROHERO;\n  const metroHeroMetrics = `https://dcmetrohero.com/api/v1/metrorail/metrics`;\n  const requestHeaders = new Headers();\n  requestHeaders.set('Content-Type', 'application/json');\n  requestHeaders.set('Access-Control-Allow-Origin', '*');\n  requestHeaders.set('Access-Control-Allow-Headers', 'Content-Type, Access-Control-Allow-Headers, X-Requested-With');\n  requestHeaders.set('apiKey', apiKey);\n\n  async function getHomeInfo() {\n    let response = await fetch(metroHeroMetrics, {\n      headers: requestHeaders\n    });\n    let lineData = await response.json();\n    console.log(lineData.lineMetricsByLine);\n    let lineArray = [];\n\n    for (let [key, value] of Object.entries(lineData.lineMetricsByLine)) {\n      lineArray.push({\n        lineCode,\n        maximumTrainDelay: value.maximumTrainDelay,\n        averageTrainFrequency: value.averageTrainFrequency,\n        expectedTrainFrequency: value.expectedTrainFrequency,\n        averagePlatformWaitTime: value.averagePlatformWaitTime,\n        platformWaitTimeTrendStatus: value.platformWaitTimeTrendStatus,\n        numTrains: value.numTrains,\n        trainFrequencyStatus: value.trainFrequencyStatus\n      });\n    }\n\n    console.log(lineArray);\n    setMetroLineData(lineArray);\n  }\n\n  useEffect(() => {\n    getHomeInfo();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Test\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Home, \"1WVIXxmZSmX1XC0N/jYN+TWeL+E=\");\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["C:/Users/glenn/Desktop/Personal coding/Back2Better-React/Back2Better/src/components/Home/index.tsx"],"names":["useEffect","useState","Home","metroLineData","setMetroLineData","lineCode","maximumTrainDelay","averageTrainFrequency","expectedTrainFrequency","averagePlatformWaitTime","platformWaitTimeTrendStatus","numTrains","trainFrequencyStatus","apiKey","process","env","REACT_APP_METROHERO","metroHeroMetrics","requestHeaders","Headers","set","getHomeInfo","response","fetch","headers","lineData","json","console","log","lineMetricsByLine","lineArray","key","value","Object","entries","push"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;;AAEA,SAASC,IAAT,GAAgB;AAAA;;AAaZ,MAAI,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCH,QAAQ,CAAW,CAAC;AAC3DI,IAAAA,QAD2D;AAE3DC,IAAAA,iBAF2D;AAG3DC,IAAAA,qBAH2D;AAI3DC,IAAAA,sBAJ2D;AAK3DC,IAAAA,uBAL2D;AAM3DC,IAAAA,2BAN2D;AAO3DC,IAAAA,SAP2D;AAQ3DC,IAAAA;AAR2D,GAAD,CAAX,CAAhD;AAWA,QAAMC,MAAM,GAAGC,OAAO,CAACC,GAAR,CAAYC,mBAA3B;AAKA,QAAMC,gBAAgB,GAAI,kDAA1B;AAEA,QAAMC,cAAmB,GAAG,IAAIC,OAAJ,EAA5B;AACAD,EAAAA,cAAc,CAACE,GAAf,CAAmB,cAAnB,EAAmC,kBAAnC;AACAF,EAAAA,cAAc,CAACE,GAAf,CAAmB,6BAAnB,EAAkD,GAAlD;AACAF,EAAAA,cAAc,CAACE,GAAf,CAAmB,8BAAnB,EAAmD,8DAAnD;AACAF,EAAAA,cAAc,CAACE,GAAf,CAAmB,QAAnB,EAA6BP,MAA7B;;AAEA,iBAAeQ,WAAf,GAA6B;AACzB,QAAIC,QAAQ,GAAG,MAAMC,KAAK,CAACN,gBAAD,EAAmB;AACzCO,MAAAA,OAAO,EAAGN;AAD+B,KAAnB,CAA1B;AAIA,QAAIO,QAAQ,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAArB;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,QAAQ,CAACI,iBAArB;AAEA,QAAIC,SAAiB,GAAG,EAAxB;;AAEA,SAAI,IAAI,CAACC,GAAD,EAAMC,KAAN,CAAR,IAAwBC,MAAM,CAACC,OAAP,CAAeT,QAAQ,CAACI,iBAAxB,CAAxB,EAAoE;AAEhEC,MAAAA,SAAS,CAACK,IAAV,CAAe;AACX9B,QAAAA,QADW;AAEXC,QAAAA,iBAAiB,EAAG0B,KAAK,CAAC1B,iBAFf;AAGXC,QAAAA,qBAAqB,EAAGyB,KAAK,CAACzB,qBAHnB;AAIXC,QAAAA,sBAAsB,EAAGwB,KAAK,CAACxB,sBAJpB;AAKXC,QAAAA,uBAAuB,EAAGuB,KAAK,CAACvB,uBALrB;AAMXC,QAAAA,2BAA2B,EAAGsB,KAAK,CAACtB,2BANzB;AAOXC,QAAAA,SAAS,EAAGqB,KAAK,CAACrB,SAPP;AAQXC,QAAAA,oBAAoB,EAAGoB,KAAK,CAACpB;AARlB,OAAf;AAUH;;AAEDe,IAAAA,OAAO,CAACC,GAAR,CAAYE,SAAZ;AAEA1B,IAAAA,gBAAgB,CAAC0B,SAAD,CAAhB;AACH;;AAED9B,EAAAA,SAAS,CAAC,MAAM;AACZqB,IAAAA,WAAW;AACd,GAFQ,EAEN,EAFM,CAAT;AAMA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;GA9EQnB,I;;KAAAA,I;AAgFT,eAAeA,IAAf","sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nfunction Home() {\r\n    \r\n    interface LineInfo {\r\n        lineCode: string;\r\n        maximumTrainDelay: number;\r\n        averageTrainFrequency: number;\r\n        expectedTrainFrequency: number;\r\n        averagePlatformWaitTime: number;\r\n        platformWaitTimeTrendStatus: string;\r\n        numTrains: number;\r\n        trainFrequencyStatus: string;\r\n    }\r\n\r\n    let [metroLineData, setMetroLineData] = useState<LineInfo>([{\r\n     lineCode,   \r\n     maximumTrainDelay,\r\n     averageTrainFrequency,\r\n     expectedTrainFrequency,\r\n     averagePlatformWaitTime,\r\n     platformWaitTimeTrendStatus,\r\n     numTrains,\r\n     trainFrequencyStatus\r\n    }]);\r\n\r\n    const apiKey = process.env.REACT_APP_METROHERO;\r\n\r\n\r\n    \r\n\r\n    const metroHeroMetrics = `https://dcmetrohero.com/api/v1/metrorail/metrics`;\r\n\r\n    const requestHeaders: any = new Headers();\r\n    requestHeaders.set('Content-Type', 'application/json');\r\n    requestHeaders.set('Access-Control-Allow-Origin', '*');\r\n    requestHeaders.set('Access-Control-Allow-Headers', 'Content-Type, Access-Control-Allow-Headers, X-Requested-With');\r\n    requestHeaders.set('apiKey', apiKey);\r\n\r\n    async function getHomeInfo() {\r\n        let response = await fetch(metroHeroMetrics, {\r\n            headers:  requestHeaders\r\n        });\r\n\r\n        let lineData = await response.json();\r\n\r\n        console.log(lineData.lineMetricsByLine);\r\n\r\n        let lineArray : any[] = []\r\n\r\n        for(let [key, value] of Object.entries(lineData.lineMetricsByLine)) {\r\n\r\n            lineArray.push({\r\n                lineCode,\r\n                maximumTrainDelay : value.maximumTrainDelay,\r\n                averageTrainFrequency : value.averageTrainFrequency,\r\n                expectedTrainFrequency : value.expectedTrainFrequency,\r\n                averagePlatformWaitTime : value.averagePlatformWaitTime,\r\n                platformWaitTimeTrendStatus : value.platformWaitTimeTrendStatus,\r\n                numTrains : value.numTrains,\r\n                trainFrequencyStatus : value.trainFrequencyStatus\r\n            })\r\n        }\r\n\r\n        console.log(lineArray)\r\n\r\n        setMetroLineData(lineArray);\r\n    }\r\n\r\n    useEffect(() => {\r\n        getHomeInfo();\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <p>Test</p>\r\n\r\n        \r\n    )\r\n}\r\n\r\nexport default Home;"]},"metadata":{},"sourceType":"module"}