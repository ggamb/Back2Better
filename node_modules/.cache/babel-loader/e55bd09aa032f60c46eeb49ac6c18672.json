{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\glenn\\\\Desktop\\\\Personal coding\\\\Back2Better-React\\\\Back2Better\\\\src\\\\components\\\\Home\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Home() {\n  _s();\n\n  let [metroLineData, setMetroLineData] = useState([]);\n  const apiKey = process.env.REACT_APP_METROHERO;\n  const metroHeroMetrics = `https://dcmetrohero.com/api/v1/metrorail/metrics`;\n  const requestHeaders = new Headers();\n  requestHeaders.set('Content-Type', 'application/json');\n  requestHeaders.set('Access-Control-Allow-Origin', '*');\n  requestHeaders.set('Access-Control-Allow-Headers', 'Content-Type, Access-Control-Allow-Headers, X-Requested-With');\n  requestHeaders.set('apiKey', apiKey);\n\n  async function getHomeInfo() {\n    /*let response = await fetch(metroHeroMetrics, {\r\n        headers:  requestHeaders\r\n    });\r\n      let lineData = await response.json();\r\n      console.log(lineData.lineMetricsByLine);\r\n      let lineArray  = []\r\n      for(let [key, value] of Object.entries(lineData.lineMetricsByLine)) {\r\n          let lineArrayEntry = {\r\n            lineCode : value.lineCode,\r\n            maximumTrainDelay : value.maximumTrainDelay,\r\n            averageTrainFrequency : value.averageTrainFrequency,\r\n            expectedTrainFrequency : value.expectedTrainFrequency,\r\n            averagePlatformWaitTime : value.averagePlatformWaitTime,\r\n            platformWaitTimeTrendStatus : value.platformWaitTimeTrendStatus,\r\n            numTrains : value.numTrains,\r\n            trainFrequencyStatus : value.trainFrequencyStatus\r\n        }\r\n          lineArray.push(lineArrayEntry);\r\n    }\r\n      console.log(lineArray)\r\n      setMetroLineData(lineArray);*/\n  }\n\n  useEffect(() => {\n    getHomeInfo();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: metroLineData.length ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }, this)\n    }, void 0, false) : /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Loading Metro data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n\n_s(Home, \"VetaJt0U889ETqAMaYcykWOB1pg=\");\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["C:/Users/glenn/Desktop/Personal coding/Back2Better-React/Back2Better/src/components/Home/index.tsx"],"names":["useEffect","useState","Home","metroLineData","setMetroLineData","apiKey","process","env","REACT_APP_METROHERO","metroHeroMetrics","requestHeaders","Headers","set","getHomeInfo","length"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;;;AAEA,SAASC,IAAT,GAAgB;AAAA;;AAaZ,MAAI,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCH,QAAQ,CAAC,EAAD,CAAhD;AAEA,QAAMI,MAAM,GAAGC,OAAO,CAACC,GAAR,CAAYC,mBAA3B;AAGA,QAAMC,gBAAgB,GAAI,kDAA1B;AAEA,QAAMC,cAAmB,GAAG,IAAIC,OAAJ,EAA5B;AACAD,EAAAA,cAAc,CAACE,GAAf,CAAmB,cAAnB,EAAmC,kBAAnC;AACAF,EAAAA,cAAc,CAACE,GAAf,CAAmB,6BAAnB,EAAkD,GAAlD;AACAF,EAAAA,cAAc,CAACE,GAAf,CAAmB,8BAAnB,EAAmD,8DAAnD;AACAF,EAAAA,cAAc,CAACE,GAAf,CAAmB,QAAnB,EAA6BP,MAA7B;;AAEA,iBAAeQ,WAAf,GAA6B;AACzB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASK;;AAEDb,EAAAA,SAAS,CAAC,MAAM;AACZa,IAAAA,WAAW;AACd,GAFQ,EAEN,EAFM,CAAT;AAMA,sBACI;AAAA,cACCV,aAAa,CAACW,MAAd,gBACG;AAAA,6BACA;AAAA;AAAA;AAAA;AAAA;AADA,qBADH,gBAMG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAPJ,mBADJ;AAaH;;GA7EQZ,I;;KAAAA,I;AA+ET,eAAeA,IAAf","sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nfunction Home() {\r\n    \r\n    interface LineInfo {\r\n        lineCode: string;\r\n        maximumTrainDelay: number;\r\n        averageTrainFrequency: number;\r\n        expectedTrainFrequency: number;\r\n        averagePlatformWaitTime: number;\r\n        platformWaitTimeTrendStatus: string;\r\n        numTrains: number;\r\n        trainFrequencyStatus: string;\r\n    }\r\n\r\n    let [metroLineData, setMetroLineData] = useState([]);\r\n\r\n    const apiKey = process.env.REACT_APP_METROHERO;\r\n    \r\n\r\n    const metroHeroMetrics = `https://dcmetrohero.com/api/v1/metrorail/metrics`;\r\n\r\n    const requestHeaders: any = new Headers();\r\n    requestHeaders.set('Content-Type', 'application/json');\r\n    requestHeaders.set('Access-Control-Allow-Origin', '*');\r\n    requestHeaders.set('Access-Control-Allow-Headers', 'Content-Type, Access-Control-Allow-Headers, X-Requested-With');\r\n    requestHeaders.set('apiKey', apiKey);\r\n\r\n    async function getHomeInfo() {\r\n        /*let response = await fetch(metroHeroMetrics, {\r\n            headers:  requestHeaders\r\n        });\r\n\r\n        let lineData = await response.json();\r\n\r\n        console.log(lineData.lineMetricsByLine);\r\n\r\n        let lineArray  = []\r\n\r\n        for(let [key, value] of Object.entries(lineData.lineMetricsByLine)) {\r\n\r\n            let lineArrayEntry = {\r\n                lineCode : value.lineCode,\r\n                maximumTrainDelay : value.maximumTrainDelay,\r\n                averageTrainFrequency : value.averageTrainFrequency,\r\n                expectedTrainFrequency : value.expectedTrainFrequency,\r\n                averagePlatformWaitTime : value.averagePlatformWaitTime,\r\n                platformWaitTimeTrendStatus : value.platformWaitTimeTrendStatus,\r\n                numTrains : value.numTrains,\r\n                trainFrequencyStatus : value.trainFrequencyStatus\r\n            }\r\n\r\n            lineArray.push(lineArrayEntry);\r\n        }\r\n\r\n        console.log(lineArray)\r\n\r\n        setMetroLineData(lineArray);*/\r\n    }\r\n\r\n    useEffect(() => {\r\n        getHomeInfo();\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n        {metroLineData.length ? (\r\n            <>\r\n            <div></div>\r\n            </>\r\n        ) : \r\n        (\r\n            <h2>Loading Metro data</h2>\r\n        )}\r\n        </>\r\n        \r\n    )\r\n}\r\n\r\nexport default Home;"]},"metadata":{},"sourceType":"module"}